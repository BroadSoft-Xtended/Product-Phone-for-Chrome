var ucone = angular.module("ucone", [ "ui.router", "base64" ], function($provide) {
    $provide.decorator("$window", function($delegate) {
        return $delegate.history = null, $delegate;
    });
});

ucone.config(function($stateProvider, $urlRouterProvider, $compileProvider) {
    $urlRouterProvider.otherwise("/login"), $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension):/), 
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension):/);
}), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app", {
            url: "/app",
            templateUrl: "/app/states/internal/app.template.html",
            resolve: {},
            controller: [ "$rootScope", "$state", "BSSip", "Storage", "webRTC", "Auth", "Utility", function($rootScope, $state, BSSip, Storage, webRTC, Auth, Utility) {
                console.log("in the app controller"), chrome.app.window.current().onClosed.addListener(function() {
                    webRTC.hangUp("call1"), webRTC.hangUp("call2"), webRTC.stop(), $rootScope.username = void 0, 
                    $rootScope.authdata = void 0;
                }), chrome.app.window.current().onRestored.addListener(function() {
                    console.log("onResized fired"), Utility.setChromeToMinSize();
                }), chrome.storage.local.get(function(storage) {
                    $rootScope.username && $rootScope.authdata || (console.log("invalid username or authdata"), 
                    $state.go("login", {
                        message: "Login-InvalidError"
                    }));
                }), BSSip.getSIPConfig().then(function(sipConfig) {
                    Storage.setValue("sipConfig", sipConfig), Auth.setConfig().then(function(config) {
                        console.log("the config for the user", config), webRTC.init(config).then(function(userAgent) {});
                    });
                }), $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
                    console.error("Error transitioning to state: '" + toState.name + "'..."), console.error("Additional debugging:\n\n"), 
                    console.error("-> toState:", toState), console.error("-> fromState:", fromState), 
                    console.error("-> toParams:", toParams), console.error("-> fromParams:", fromParams), 
                    console.error("-> error:", error), console.error("-> event:", event);
                }), $rootScope.$on("$stateNotFound", function(event, unfoundState, fromState, fromParams) {
                    console.log("Missing state: '" + unfoundState + "'..."), console.log("Additional debugging:\n\n"), 
                    console.log("-> event", event), console.log("-> unfoundState:", unfoundState), console.log("-> fromState:", fromState), 
                    console.log("-> fromParams", fromParams);
                });
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings.blocked", {
            url: "/blocked",
            templateUrl: "/app/states/internal/blocked/blocked.template.html",
            resolve: {},
            controller: [ "$scope", "BSAnonymousCallRejection", "BSSelectiveCallRejection", "BSDirectory", function($scope, BSAnonymousCallRejection, BSSelectiveCallRejection, BSDirectory) {
                console.log("in the blocked controller"), $scope.togglePrivateCalls = function(value) {
                    BSSelectiveCallRejection.addBlockedNumber({
                        firstName: "PrivateCalls",
                        lastName: "",
                        "private": $scope.privateCalls,
                        number: "0001"
                    }).then(function() {
                        $scope.getAllBlockedNumbers();
                    });
                }, $scope.toggleAnonymousCalls = function(value) {
                    BSSelectiveCallRejection.addBlockedNumber({
                        firstName: "AnonymousCalls",
                        lastName: "",
                        anonymous: $scope.anonymousCalls,
                        number: "0001"
                    }).then(function() {
                        $scope.getAllBlockedNumbers();
                    });
                }, $scope.getAllBlockedNumbers = function() {
                    BSSelectiveCallRejection.get().then(function(contacts) {
                        $scope.contacts = contacts, $scope.privateCalls = void 0 !== _.findWhere(contacts, {
                            privateCalls: "true"
                        }), $scope.anonymousCalls = void 0 !== _.findWhere(contacts, {
                            anonymousCalls: "true"
                        });
                    });
                }, $scope.addBlocked = function(contact) {
                    $scope.searchBlockedContactsList = [], $scope.blockedSearchText = "", console.log(contact.number), 
                    BSSelectiveCallRejection.addBlockedNumber(contact).then(function() {
                        $scope.getAllBlockedNumbers();
                    });
                }, $scope.removeBlocked = function(contact) {
                    BSSelectiveCallRejection.remove(contact).then(function() {
                        $scope.getAllBlockedNumbers();
                    });
                }, $scope.searchBlockedContacts = function() {
                    null != $scope.blockedSearchText.match(/^[0-9 ]+$/) && ($scope.showAddButton = !0), 
                    27 == event.keyCode && ($scope.searchBlockedContactsList = [], $scope.blockedSearchText = ""), 
                    BSDirectory.searchDirectoryContacts($scope.blockedSearchText, 1, 4).then(function(results) {
                        $scope.searchBlockedContactsList = results;
                    });
                }, $scope.getAllBlockedNumbers();
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.main.contacts", {
            url: "/contacts",
            templateUrl: "/app/states/internal/contacts/contacts.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "BSDirectory", "Media", "LocalContacts", function($rootScope, $scope, BSDirectory, Media, LocalContacts) {
                console.log("in the contacts controller"), $scope.bsPageStart = 1, $scope.telephoneContacts = [], 
                $scope.media = Media, $scope.foo = {}, $scope.getBroadsoftContacts = function() {
                    BSDirectory.getDirectoryContacts($scope.bsPageStart, 50).then(function(contacts) {
                        $scope.bsPageStart += 50, $scope.telephoneContacts = $scope.telephoneContacts.concat(contacts);
                    });
                }, $scope.loadMoreContacts = function(contacts, index) {
                    index >= contacts.length - 8 && $scope.getBroadsoftContacts();
                }, $scope.addToContactFavs = function(contact) {
                    $scope.foo = {}, LocalContacts.add(contact), $scope.openPopup = !1;
                }, $scope.getBroadsoftContacts();
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.main.favs", {
            url: "/favs",
            templateUrl: "/app/states/internal/favs/favs.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "LocalContacts", "Utility", "$timeout", function($rootScope, $scope, LocalContacts, Utility, $timeout) {
                console.log("in the favs controller"), LocalContacts.get().then(function(contacts) {
                    $scope.contacts = contacts, console.log("fav contacts: ", contacts);
                }), $rootScope.$on("favsChanged", function() {
                    LocalContacts.get().then(function(contacts) {
                        $scope.contacts = contacts, console.log("fav contacts: ", contacts);
                    });
                });
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header", {
            url: "/header",
            templateUrl: "/app/states/internal/header/header.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "BSPersonalAssistant", function($rootScope, $scope, BSPersonalAssistant) {
                console.log("in the header controller"), console.log("Your language is:", $rootScope.language), 
                $scope.searchText = "", $scope.searchContactsList = [], $scope.stateList = BSPersonalAssistant.getUserStates(), 
                BSPersonalAssistant.getPersonalAssistantData().then(function(results) {
                    $scope.personalAssistantResults = results, $scope.selectedStatus = results.presence;
                }), $scope.statusChange = function() {
                    console.log($scope.selectedStatus);
                    var params = $scope.personalAssistantResults;
                    params.presence = $scope.selectedStatus, params.enableExpirationTime = !1, BSPersonalAssistant.setPersonalAssistantData(params).then(function() {
                        console.log("Status set");
                    });
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings.incoming", {
            url: "/incoming",
            templateUrl: "/app/states/internal/incoming/incoming.template.html",
            resolve: {},
            controller: [ "$scope", "Utility", "BSPersonalAssistant", "BSCallForwardAlways", "BSCallNotify", "BSBroadworksAnywhere", function($scope, Utility, BSPersonalAssistant, BSCallForwardAlways, BSCallNotify, BSBroadworksAnywhere) {
                console.log("in the incoming controller"), $scope.Utility = Utility, $scope.stateList = BSPersonalAssistant.getUserStates(), 
                BSBroadworksAnywhere.get().then(function(results) {
                    $scope.mobileNumber = results[0], $scope.mobileNumberActive = "true" == results[1];
                }), BSPersonalAssistant.getPersonalAssistantData().then(function(results) {
                    $scope.personalAssistantData = results;
                }), BSCallForwardAlways.getData().then(function(results) {
                    $scope.callForwardAlways = results;
                }), BSCallNotify.getData().then(function(results) {
                    $scope.callNotifyEmail = results;
                }), $scope.setPersonalAssistantData = function() {
                    var params = {
                        presence: $scope.personalAssistantData.presence,
                        enableExpirationTime: $scope.personalAssistantData.enableExpirationTime,
                        expirationTime: Utility.formatDate($scope.personalAssistantData.expirationDate, $scope.personalAssistantData.expirationTime),
                        enableTransferToAttendant: "" !== $scope.personalAssistantData.attendantNumber ? "true" : "false",
                        attendantNumber: $scope.personalAssistantData.attendantNumber,
                        ringSplash: $scope.personalAssistantData.ringSplash
                    };
                    BSPersonalAssistant.setPersonalAssistantData(params).then(function(results) {
                        $scope.personalAssistantData = results;
                    });
                }, $scope.setCallForwardAlways = function() {
                    BSCallForwardAlways.setNumber($scope.callForwardAlways).then(function(results) {});
                }, $scope.setCallNotify = function() {
                    BSCallNotify.setCallNotify($scope.callNotifyEmail).then(function(results) {
                        $scope.callNotifyEmail = results;
                    });
                }, $scope.setBroadworksAnywhere = function() {
                    BSBroadworksAnywhere.set($scope.mobileNumber, $scope.mobileNumberActive).then(function(results) {
                        $scope.moblieNumber = results;
                    });
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.incomingCall", {
            url: "/incomingCall",
            params: {
                displayName: null
            },
            templateUrl: "/app/states/internal/incomingCall/incomingCall.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "$state", "webRTC", "Utility", function($rootScope, $scope, $state, webRTC, Utility) {
                console.log("in the incoming call controller"), $scope.rtc = webRTC, $scope.util = Utility, 
                $scope.displayName = $state.params.displayName || "Unknown";
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.main", {
            url: "/main",
            templateUrl: "/app/states/internal/main/main.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "$state", "BSDirectory", "Media", function($rootScope, $scope, $state, BSDirectory, Media) {
                console.log("in the main controller"), $scope.bsPageStart = 1, $scope.searchContactsList = [], 
                $scope.media = Media, $scope.showCallButton = !1, $rootScope.settings = !1, $scope.searchText = "", 
                $scope.makeSearchCall = function() {
                    Media.startAudioCall({
                        number: $scope.searchText
                    });
                }, $scope.searchContacts = function(event) {
                    27 == event.keyCode ? ($scope.searchContactsList = [], $scope.searchText = "") : BSDirectory.searchDirectoryContacts($scope.searchText, 1, 8).then(function(results) {
                        console.log("res", results), $scope.searchContactsList = results;
                    });
                }, $scope.getBroadsoftContacts = function() {
                    BSDirectory.searchDirectoryContacts($scope.searchText, $scope.bsPageStart, 8).then(function(contacts) {
                        $scope.bsPageStart += 8, $scope.searchContactsList = $scope.searchContactsList.concat(contacts);
                    });
                }, $scope.loadMoreContacts = function(contacts, index) {
                    index >= contacts.length - 8 && $scope.getBroadsoftContacts();
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.myVoicemail", {
            url: "/myVoicemail",
            templateUrl: "/app/states/internal/myVoicemail/myVoicemail.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "$state", function($rootScope, $scope, $state) {
                console.log("in the my Voicemail controller"), $scope.searchText = "", $scope.searchContactsList = [], 
                $scope.messages = [ {
                    firstName: "Billy",
                    lastName: "Boy"
                }, {
                    firstName: "Eric",
                    lastName: "Larsen"
                }, {
                    firstName: "Janet",
                    lastName: "Johnson"
                } ];
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.main.recent", {
            url: "/recent",
            templateUrl: "/app/states/internal/recent/recent.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "Media", "BSCallLogs", "LocalContacts", function($rootScope, $scope, Media, BSCallLogs, LocalContacts) {
                console.log("in the recent controller"), $scope.spinner = !0, $scope.media = Media, 
                $scope.foo = {}, BSCallLogs.getData().then(function(results) {
                    $scope.spinner = !1, $scope.contacts = results;
                });
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings", {
            url: "/settings",
            templateUrl: "/app/states/internal/settings/settings.template.html",
            resolve: {},
            controller: [ "$rootScope", "$scope", "BSDirectory", function($rootScope, $scope, BSDirectory) {
                console.log("in the settings controller"), $rootScope.settings = !0, $scope.searchText = "", 
                $scope.makeSearchCall = function() {
                    Media.startAudioCall({
                        number: $scope.searchText
                    });
                }, $scope.searchContacts = function(event) {
                    27 == event.keyCode ? ($scope.searchContactsList = [], $scope.searchText = "") : BSDirectory.searchDirectoryContacts($scope.searchText, 1, 7).then(function(results) {
                        console.log("res", results), $scope.searchContactsList = results;
                    });
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.videoCall", {
            url: "/videoCall",
            params: {
                contact: null,
                makeCall: null,
                displayVideo: null
            },
            templateUrl: "/app/states/internal/videoCall/videoCall.template.html",
            resolve: {},
            controller: [ "$scope", "$interval", "$timeout", "$rootScope", "webRTC", "$state", "Utility", "BSDirectory", "BSConference", function($scope, $interval, $timeout, $rootScope, webRTC, $state, Utility, BSDirectory, BSConference) {
                console.log("in the videoCall controller"), $scope.muted = !1, $scope.video = !0, 
                $scope.held = !1, $scope.showDialPad = !1, $scope.showSearchTransfer = !1, $scope.showSearchAdd = !1, 
                $scope.showAcceptDecline = !1, $scope.showSelfVideo = !0, $scope.searchContactsList = [], 
                $scope.state = $state, $scope.rtc = webRTC, Utility.setChromeToVideoSize(), $scope.call1Active = !0, 
                $scope.pendingNumber = "", $rootScope.$on("apply", function() {
                    $scope.$apply();
                }), $rootScope.$on("progressEventFired", function(e, event) {
                    console.log("caught the progress event"), $scope.$apply();
                }), $rootScope.$on("sessionReady", function(e, event) {
                    $scope.pendingNumber = "", console.log("fired", event), document.querySelector("#dtmfRingBack") && document.querySelector("#dtmfRingBack").pause();
                    var sender = event.sender, localStreams = sender.getLocalStreams();
                    if (localStreams.length > 0) {
                        var selfVideo = document.getElementById("selfVideo");
                        selfVideo.src = window.URL.createObjectURL(localStreams[0]);
                    }
                    var remoteStreams = sender.getRemoteStreams();
                    if (remoteStreams.length > 0) {
                        var remoteVideo1 = document.getElementById("remoteVideo1");
                        if (remoteVideo1.src = window.URL.createObjectURL(remoteStreams[0]), remoteStreams.length > 1) {
                            var remoteVideo2 = document.getElementById("remoteVideo2");
                            remoteVideo2.src = window.URL.createObjectURL(remoteStreams[1]);
                        }
                    }
                    $scope.$apply();
                }), $state.params.makeCall && (document.querySelector("#dtmfRingBack").play(), $scope.contact = $state.params.contact, 
                $scope.pendingNumber = $scope.contact.number, webRTC.makeCall($scope.contact.number, $state.params.displayVideo), 
                console.log("show video", $state.params.displayVideo)), $scope.addNewCall = function(number) {
                    console.log("calling a new number", number), webRTC.hold(webRTC.call1.session), 
                    webRTC.call1.active = !1, webRTC.call2.active = !0, document.querySelector("#dtmfRingBack").play(), 
                    webRTC.makeCall(number, !0);
                }, $scope.activateCall = function(activeCall) {
                    "call1" == activeCall && (console.log("activating call 1"), webRTC.unhold("call1"), 
                    webRTC.hold("call2"), webRTC.call1.active = !0, webRTC.call2.active = !1), "call2" == activeCall && (console.log("activating call 2"), 
                    webRTC.unhold("call2"), webRTC.hold("call1"), webRTC.call1.active = !1, webRTC.call2.active = !0);
                }, $scope.joinCalls = function() {
                    BSConference.start();
                }, $scope.playDtmf = function(number, session) {
                    "#" === number ? document.querySelector("#dtmfHash").play() : "*" === number ? document.querySelector("#dtmfStar").play() : document.querySelector("#dtmf" + number).play(), 
                    webRTC.sendDTMF(number, session);
                }, $scope.searchContacts = function() {
                    27 == event.keyCode && ($scope.searchContactsList = [], $scope.searchText = ""), 
                    BSDirectory.searchDirectoryContacts($scope.searchText, 1, 7).then(function(results) {
                        $scope.searchContactsList = results;
                    });
                }, $scope.transferCall = function(number, session) {
                    webRTC.transfer(number, session), $state.go("app.header.main.favs");
                }, $scope.hideActionPanels = function() {
                    $scope.showDialPad = !1, $scope.showSearchTransfer = !1, $scope.showSearchAdd = !1;
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings.vip", {
            url: "/vip",
            templateUrl: "/app/states/internal/vip/vip.template.html",
            resolve: {},
            controller: [ "$scope", "BSPersonalAssistant", "BSDirectory", function($scope, BSPersonalAssistant, BSDirectory) {
                console.log("in the vip controller"), $scope.getAllNumbers = function() {
                    BSPersonalAssistant.getExclusionNumbers().then(function(contacts) {
                        $scope.exlusionNumbers = contacts;
                    });
                }, $scope.addVip = function(contact) {
                    $scope.searchVipContactsList = [], $scope.vipSearchText = "", BSPersonalAssistant.addExclusionNumber(contact).then(function() {
                        $scope.getAllNumbers();
                    });
                }, $scope.removeVip = function(contact) {
                    BSPersonalAssistant.deleteExclusionNumber(contact).then(function() {
                        $scope.getAllNumbers();
                    });
                }, $scope.searchVipContacts = function() {
                    null != $scope.vipSearchText.match(/^[0-9 ]+$/) && ($scope.showAddButton = !0), 
                    27 == event.keyCode && ($scope.searchVipContactsList = [], $scope.vipSearchText = ""), 
                    BSDirectory.searchDirectoryContacts($scope.vipSearchText, 1, 5).then(function(results) {
                        $scope.searchVipContactsList = results;
                    });
                }, $scope.getAllNumbers();
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings.voicemail", {
            url: "/voicemail",
            templateUrl: "/app/states/internal/voicemail/voicemail.template.html",
            resolve: {},
            controller: [ function() {
                console.log("in the voicemail controller");
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("app.header.settings.voicemailSettings", {
            url: "/voicemailSettings",
            templateUrl: "/app/states/internal/voicemailSettings/voicemailSettings.template.html",
            resolve: {},
            controller: [ function() {
                console.log("in the voicemailSettings controller");
            } ]
        });
    } ]);
}(), function() {
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("login", {
            url: "/login",
            templateUrl: "/app/states/login/login.template.html",
            params: {
                message: null
            },
            resolve: {},
            controller: [ "$rootScope", "$scope", "$state", "$http", "Auth", "Utility", "Storage", function($rootScope, $scope, $state, $http, Auth, Utility, Storage) {
                console.log("in the login controller"), $scope.spinner = !1, Utility.setChromeToMinSize(), 
                chrome.storage.local.get(function(storage) {
                    storage.LoginUrl && ($scope.xsp = storage.LoginUrl), storage.LoginEmail && ($scope.email = storage.LoginEmail), 
                    $scope.$apply();
                }), $rootScope.language = Utility.getBrowserLanguage(), $state.params.message && ($scope.errorMessage = $state.params.message), 
                $scope.rememberLoginUrlAndEmail = function() {
                    Storage.setValue("LoginUrl", $scope.xsp), Storage.setValue("LoginEmail", $scope.email);
                }, $scope.broadsoftLogin = function(login) {
                    $scope.rememberLoginUrlAndEmail(), console.log("bsft login"), login.$pristine = !1, 
                    login.$valid ? (Auth.setCredentials($scope.email, $scope.password, $scope.xsp), 
                    $http.get($rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/" + $scope.email + "/directories/Enterprise").success(function(response) {
                        $state.go("app.header.main.favs");
                    }).error(function(error) {
                        $scope.spinner = !1, console.log("Login Error", error), $scope.errorMessage = "InvalidUserNamePassword", 
                        login.$valid = !1;
                    })) : ($scope.spinner = !1, $scope.errorMessage = "InvalidUserNamePassword");
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.config([ "$stateProvider", function($stateProvider) {
        $stateProvider.state("splash", {
            url: "/",
            templateUrl: "/app/states/splash/splash.template.html",
            resolve: {
                avoidSplash: [ "$state", function($state) {
                    chrome.storage.local.get(function(storage) {
                        storage.avoidSplash && $state.go("login");
                    });
                } ]
            },
            controller: [ "$rootScope", "$scope", "$interval", function($rootScope, $scope, $interval) {
                console.log("in the splash controller"), $scope.userAction || $interval(function() {
                    $scope.splashIndex = $scope.splashIndex < 2 ? $scope.splashIndex + 1 : 0;
                }, 1e4), $scope.avoidSplash = function() {
                    chrome.storage.local.set({
                        avoidSplash: !0
                    });
                };
            } ]
        });
    } ]);
}(), function() {
    "use strict";
    ucone.directive("contactActions", function(Media, LocalContacts, $rootScope) {
        return {
            scope: {
                contact: "=",
                deleteMode: "=",
                show: "="
            },
            templateUrl: "/app/directives/contactActions/contactActions.template.html",
            link: function(scope, element, attrs) {
                scope.media = Media, scope.addToFavs = function(contact) {
                    console.log("add"), LocalContacts.add(contact).then(function() {
                        scope.openPopup = !1, $rootScope.$broadcast("favsChanged");
                    });
                }, scope.removeFav = function(index) {
                    console.log("remove"), LocalContacts["delete"](index).then(function(contacts) {
                        $rootScope.$broadcast("favsChanged");
                    });
                }, scope.startAudioCall = function(contact) {
                    var error = Media.startAudioCall(contact);
                    error && ($rootScope.wrsError = !0);
                }, scope.startVideoCall = function(contact) {
                    var error = Media.startVideoCall(contact);
                    error && ($rootScope.wrsError = !0);
                };
            }
        };
    });
}(), function() {
    "use strict";
    ucone.directive("contactCircle", function(Utility) {
        return {
            scope: {
                contact: "="
            },
            templateUrl: "/app/directives/contactCircle/contactCircle.template.html",
            link: function(scope, element, attrs) {
                scope.getContactLetter = function(contact) {
                    return Utility.getFirstLetter(contact.firstName || contact.name || contact.description);
                };
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("ucone").directive("ngEnter", function() {
        return function(scope, element, attrs) {
            element.bind("keydown keypress", function(event) {
                13 === event.which && (scope.$apply(function() {
                    scope.$eval(attrs.ngEnter, {
                        event: event
                    });
                }), event.preventDefault());
            });
        };
    });
}(), function() {
    "use strict";
    ucone.factory("Auth", [ "$base64", "$rootScope", "$http", "Storage", "$q", function($base64, $rootScope, $http, Storage, $q) {
        var service = {};
        return service.clearCredentials = function() {
            $http.defaults.headers.common.Authorization = "Basic ", $rootScope.username = "", 
            $rootScope.authdata = "";
        }, service.setCredentials = function(username, password, xsp) {
            service.clearCredentials();
            var authdata = $base64.encode(username + ":" + password);
            $rootScope.xsp = xsp, $rootScope.username = username, $rootScope.authdata = authdata, 
            console.log(username), console.log($rootScope.username), $http.defaults.headers.common.Authorization = "Basic " + authdata;
        }, service.setConfig = function(type) {
            console.log("type", type);
            var configuration, defer = $q.defer();
            return chrome.storage.local.get(function(storage) {
                configuration = {
                    ws_servers: [ {
                        ws_uri: "attemptTwo" == type ? storage.sipConfig.secondaryWrsAddress : storage.sipConfig.primaryWrsAddress,
                        weight: 0
                    } ],
                    uri: storage.sipConfig.sipLineport,
                    auth_user: storage.sipConfig.sipUsername,
                    authorization_user: storage.sipConfig.sipUsername,
                    password: storage.sipConfig.sipPassword,
                    stun_servers: "attemptTwo" == type ? storage.sipConfig.secondaryStunServer : storage.sipConfig.primaryStunServer,
                    trace_sip: !0,
                    displayName: _.unescape(storage.sipConfig.userFirstName + " " + storage.sipConfig.userLastName).replace("&apos;", "'")
                }, console.log("the user's config: ", configuration), $rootScope.userFirstName = storage.sipConfig.userFirstName, 
                defer.resolve(configuration);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSAnonymousCallRejection", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.set = function(value) {
            var apiName = "/services/AnonymousCallRejection", defer = $q.defer(), xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><AnonymousCallRejection xmlns="http://schema.broadsoft.com/xsi"><active>' + value + "</active></AnonymousCallRejection>", req = {
                method: "PUT",
                url: baseUrl + $rootScope.username + apiName,
                headers: {
                    Accept: "text/xml",
                    "Content-Type": "text/xml"
                },
                data: xmlParams
            };
            return $http(req).success(function(response) {
                defer.resolve(value);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.get = function() {
            var apiName = "/services/AnonymousCallRejection", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                defer.resolve("true" == response.AnonymousCallRejection.active.$);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSBroadworksAnywhere", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.set = function(phoneNumber, active) {
            var defer = $q.defer();
            return service.get().then(function(oldNumber) {
                var apiName = "/services/BroadworksAnywhere/Location/" + oldNumber[0], xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><BroadWorksAnywhereLocation xmlns="http://schema.broadsoft.com/xsi"><phoneNumber>' + phoneNumber + "</phoneNumber><description>My Phone</description><active>" + active + "</active><broadworksCallControl>false</broadworksCallControl><useDiversionInhibitor>false</useDiversionInhibitor><answerConfirmationRequired>false</answerConfirmationRequired></BroadWorksAnywhereLocation>", req = {
                    method: "PUT",
                    url: baseUrl + $rootScope.username + apiName,
                    headers: {
                        Accept: "text/xml",
                        "Content-Type": "text/xml"
                    },
                    data: xmlParams
                };
                console.log("foo", req), $http(req).success(function(response) {
                    console.log("BSBroadworksAnywhere SET", response), defer.resolve(phoneNumber);
                }).error(function(error) {
                    console.log(error), defer.reject(error);
                });
            }), defer.promise;
        }, service.get = function() {
            var apiName = "/services/BroadworksAnywhere", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                console.log("BSBroadworksAnywhere Get: ", response), response.BroadWorksAnywhere.locations || defer.resolve(""), 
                defer.resolve([ response.BroadWorksAnywhere.locations.location.phoneNumber.$, response.BroadWorksAnywhere.locations.location.active.$ ]);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSCallForwardAlways", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.getData = function() {
            var apiName = "/services/CallForwardingAlways?", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                var number = "undefined" != typeof response.CallForwardingAlways.forwardToPhoneNumber ? response.CallForwardingAlways.forwardToPhoneNumber.$ : "";
                defer.resolve(number);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.setNumber = function(number) {
            var apiName = "/services/CallForwardingAlways?", defer = $q.defer();
            number = number || "";
            var active = !!number, xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><CallForwardingAlways xmlns="http://schema.broadsoft.com/xsi"><active>' + active + "</active><forwardToPhoneNumber>" + number + "</forwardToPhoneNumber><ringSplash>" + active + "</ringSplash></CallForwardingAlways>";
            "" === number && (xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><CallForwardingAlways xmlns="http://schema.broadsoft.com/xsi"><active>' + active + "</active><ringSplash>" + active + "</ringSplash></CallForwardingAlways>");
            var req = {
                method: "PUT",
                url: baseUrl + $rootScope.username + apiName,
                headers: {
                    Accept: "text/xml",
                    "Content-Type": "text/xml"
                },
                data: xmlParams
            };
            return $http(req).success(function() {
                defer.resolve(number);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSCallLogs", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.formatCall = function(call, type) {
            var callLogId = call.callLogId ? call.callLogId.$ : "", countryCode = call.countryCode ? call.countryCode.$ : "", name = call.name ? call.name.$ : "", number = call.phoneNumber ? call.phoneNumber.$ : "", time = call.time ? call.time.$ : "", formattedTime = time.split("T")[0] + " " + time.split("T")[1].substring(0, 8);
            return {
                callLogId: callLogId,
                countryCode: countryCode,
                name: name,
                number: number,
                time: formattedTime,
                type: type
            };
        }, service.formatCallLogs = function(CallLogs) {
            var calls = [];
            return _.each(CallLogs.missed.callLogsEntry, function(call) {
                calls.push(service.formatCall(call, "missed"));
            }), _.each(CallLogs.placed.callLogsEntry, function(call) {
                calls.push(service.formatCall(call, "placed"));
            }), _.each(CallLogs.received.callLogsEntry, function(call) {
                calls.push(service.formatCall(call, "received"));
            }), _.sortBy(calls, "time").reverse();
        }, service.getData = function() {
            var apiName = "/directories/CallLogs", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                console.log(service.formatCallLogs(response.CallLogs)), defer.resolve(service.formatCallLogs(response.CallLogs));
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSCallNotify", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.getData = function() {
            var apiName = "/services/callnotify/?", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                var email = "undefined" != typeof response.CallNotify.callNotifyEmailAddress ? response.CallNotify.callNotifyEmailAddress.$ : "";
                defer.resolve(email);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.setCallNotify = function(email) {
            var apiName = "/services/callnotify/?", defer = $q.defer(), xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><CallNotify xmlns="http://schema.broadsoft.com/xsi"><callNotifyEmailAddress>' + email + "</callNotifyEmailAddress></CallNotify>", req = {
                method: "PUT",
                url: baseUrl + $rootScope.username + apiName,
                headers: {
                    Accept: "text/xml",
                    "Content-Type": "text/xml"
                },
                data: xmlParams
            };
            return $http(req).success(function(response) {
                defer.resolve(email);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSConference", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {};
        return service.start = function() {
            var callIds = [], baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/" + $rootScope.username + "/calls/Conference";
            $http.get("https://xsp1.ihs.broadsoft.com/com.broadsoft.xsi-actions/v2.0/user/jodonnell@broadsoft.com/calls").success(function(results) {
                _.each(results.Calls.call, function(call) {
                    callIds.push({
                        uri: call.uri.$,
                        callId: call.callId.$
                    });
                });
                var xmlParams = '<?xml version="1.0" encoding="UTF-8"?><Conference xmlns="http://schema.broadsoft.com/xsi"><conferenceParticipantList><conferenceParticipant><callId>' + callIds[0].callId + "</callId></conferenceParticipant><conferenceParticipant><callId>" + callIds[1].callId + "</callId></conferenceParticipant></conferenceParticipantList></Conference>", req = {
                    method: "POST",
                    url: baseUrl,
                    headers: {
                        Accept: "text/xml",
                        "Content-Type": "text/xml"
                    },
                    data: xmlParams
                };
                $http(req).success(function(response) {
                    console.log("Conference Started ", callIds);
                }).error(function(error) {
                    console.log(error);
                });
            }).error(function(error) {
                console.log("did not get the calls: ", error);
            });
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSDirectory", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.initBroadsoftContacts = function(BSFTContacts) {
            var allContacts = [];
            allContacts = BSFTContacts.constructor === Array ? BSFTContacts : [ BSFTContacts ];
            var contacts = [];
            return _.each(allContacts, function(contact) {
                var firstName = contact.firstName ? contact.firstName.$ : "", lastName = contact.lastName ? contact.lastName.$ : "", number = contact.number ? contact.number.$ : "", id = contact.userId ? contact.userId.$ : "", mobileNumber = contact.additionalDetails && contact.additionalDetails.mobile ? contact.additionalDetails.mobile.$ : "";
                contacts.push({
                    firstName: firstName,
                    lastName: lastName,
                    number: number,
                    id: id,
                    mobileNumber: mobileNumber
                });
            }), contacts;
        }, service.getDirectoryContacts = function(pageStart, pageSize) {
            var apiName = "/directories/Enterprise?", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName + "start=" + pageStart + "&results=" + pageSize).success(function(response) {
                defer.resolve(service.initBroadsoftContacts(response.Enterprise.enterpriseDirectory.directoryDetails));
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.searchDirectoryContacts = function(searchText, pageStart, pageSize) {
            var lastName, firstName, searchWithOr, apiName = "/directories/Enterprise?", defer = $q.defer();
            return searchText ? (searchText.indexOf(" ") > -1 ? (firstName = searchText.split(" ")[0], 
            lastName = searchText.split(" ")[1], searchWithOr = !1) : (firstName = searchText, 
            lastName = searchText, searchWithOr = !0), $http.get(baseUrl + $rootScope.username + apiName + "searchCriteriaModeOr=" + searchWithOr + "&firstName=*" + firstName + "*/i&lastName=*" + lastName + "*/i&start=" + pageStart + "&results=" + pageSize).success(function(response) {
                defer.resolve(service.initBroadsoftContacts(response.Enterprise.enterpriseDirectory.directoryDetails));
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise) : (defer.resolve([]), defer.promise);
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSPersonalAssistant", [ "$rootScope", "$http", "$q", function($rootScope, $http, $q) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.formatPAData = function(data) {
            var presence = "undefined" != typeof data.presence ? data.presence.$ : "Available", attendantNumber = "undefined" != typeof data.attendantNumber ? data.attendantNumber.$ : "", expirationDate = "undefined" != typeof data.expirationTime ? data.expirationTime.$.split("T")[0] : "", expirationTime = "undefined" != typeof data.expirationTime ? data.expirationTime.$.split("T")[1].substr(0, 5) : "", enableExpirationTime = "undefined" != typeof data.enableExpirationTime ? "true" === data.enableExpirationTime.$ : "";
            return {
                presence: presence,
                attendantNumber: attendantNumber,
                expirationDate: expirationDate,
                expirationTime: expirationTime,
                enableExpirationTime: enableExpirationTime
            };
        }, service.getPersonalAssistantData = function() {
            var apiName = "/services/personalassistant", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                defer.resolve(service.formatPAData(response.PersonalAssistant));
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.setPersonalAssistantData = function(params) {
            var apiName = "/services/personalassistant", defer = $q.defer();
            params.enableExpirationTime = params.enableExpirationTime ? "true" : "false", params.enableTransferToAttendant = params.enableTransferToAttendant ? "true" : "false";
            var xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><PersonalAssistant xmlns="http://schema.broadsoft.com/xsi"><presence>' + params.presence + "</presence><enableExpirationTime>" + params.enableExpirationTime + "</enableExpirationTime><expirationTime>" + params.expirationTime + "</expirationTime><enableTransferToAttendant>" + params.enableTransferToAttendant + "</enableTransferToAttendant><attendantNumber>" + params.attendantNumber + "</attendantNumber><ringSplash>false</ringSplash></PersonalAssistant>";
            console.log("foo", params.expirationTime), "false" === params.enableExpirationTime && (xmlParams = '<?xml version="1.0" encoding="ISO-8859-1"?><PersonalAssistant xmlns="http://schema.broadsoft.com/xsi"><presence>' + params.presence + "</presence><enableExpirationTime>" + params.enableExpirationTime + "</enableExpirationTime><enableTransferToAttendant>" + params.enableTransferToAttendant + "</enableTransferToAttendant><attendantNumber>" + params.attendantNumber + "</attendantNumber><ringSplash>false</ringSplash></PersonalAssistant>"), 
            console.log(xmlParams);
            var req = {
                method: "PUT",
                url: baseUrl + $rootScope.username + apiName,
                headers: {
                    Accept: "text/xml",
                    "Content-Type": "text/xml"
                },
                data: xmlParams
            };
            return $http(req).success(function(response) {
                service.getPersonalAssistantData().then(function(response) {
                    defer.resolve(response);
                });
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.getUserStates = function() {
            return [ {
                value: "None",
                text: "Available"
            }, {
                value: "Business Trip",
                text: "BusinessTrip"
            }, {
                value: "Gone for the Day",
                text: "GoneForTheDay"
            }, {
                value: "Lunch",
                text: "Lunch"
            }, {
                value: "Meeting",
                text: "Meeting"
            }, {
                value: "Out Of Office",
                text: "OutOfOffice"
            }, {
                value: "Temporarily Out",
                text: "TemporarilyOut"
            }, {
                value: "Training",
                text: "Training"
            }, {
                value: "Unavailable",
                text: "Unavailable"
            }, {
                value: "Vacation",
                text: "Vacation"
            } ];
        }, service.formatExclusionNumberList = function(list) {
            var newList;
            if (!list) return [];
            newList = list.constructor === Array ? list : [ list ];
            var results = [];
            return _.each(newList, function(item) {
                console.log("item", item), results.push({
                    description: item.description.$,
                    number: item.number.$
                });
            }), results;
        }, service.getExclusionNumbers = function() {
            var apiName = "/services/personalassistant/exclusionnumberlist", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                defer.resolve(service.formatExclusionNumberList(response.PersonalAssistantExclusionNumberList.exclusionNumber));
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.deleteExclusionNumber = function(contact) {
            var apiName = "/services/personalassistant/exclusionnumber/" + contact.number, defer = $q.defer();
            return $http["delete"](baseUrl + $rootScope.username + apiName).success(function(response) {
                defer.resolve(contact.number + " deleted");
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.addExclusionNumber = function(contact) {
            var apiName = "/services/personalassistant/exclusionnumber", defer = $q.defer(), xmlParams = '<?xml version="1.0" encoding="UTF-8"?><PersonalAssistantExclusionNumber xmlns="http://schema.broadsoft.com/xsi"><number>' + contact.number + "</number><description>" + contact.firstName + " " + contact.lastName + "</description></PersonalAssistantExclusionNumber>", req = {
                method: "POST",
                url: baseUrl + $rootScope.username + apiName,
                headers: {
                    Accept: "text/xml",
                    "Content-Type": "text/xml"
                },
                data: xmlParams
            };
            return $http(req).success(function(response) {
                defer.resolve("VIP added ", contact.number);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSSelectiveCallRejection", [ "$rootScope", "$http", "$q", "$base64", function($rootScope, $http, $q, $base64) {
        var service = {}, baseUrl = $rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/";
        return service.remove = function(contact) {
            var apiName = "/services/SelectiveCallRejection/criteria/", defer = $q.defer(), name = contact.name || contact.firstName + " " + contact.lastName;
            return $http["delete"](baseUrl + $rootScope.username + apiName + name).success(function(response) {
                defer.resolve("Deleted, ", name);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.addBlockedNumber = function(contact) {
            var defer = $q.defer();
            return service.remove(contact).then(function(results) {
                console.log(results);
                var apiName = "/services/SelectiveCallRejection/Criteria", allowPrivate = contact["private"] || !1, allowAnonymous = contact.anonymous || !1;
                "0001" === contact.number && (contact.number = "");
                var xmlParams = '<?xml version="1.0" encoding="UTF-8"?><SelectiveCallRejectionCriteria xmlns="http://schema.broadsoft.com/xsi"><blackListed>false</blackListed><criteria><criteriaName>' + contact.firstName + " " + contact.lastName + "</criteriaName><criteriaFromDn><fromDnCriteriaSelection>Specified Only</fromDnCriteriaSelection><includeAnonymousCallers>" + allowPrivate + "</includeAnonymousCallers><includeUnavailableCallers>" + allowAnonymous + "</includeUnavailableCallers><phoneNumberList><phoneNumber>" + contact.number + "</phoneNumber></phoneNumberList></criteriaFromDn><criteriaCallToNumber><callToNumber><type>Primary</type></callToNumber></criteriaCallToNumber></criteria></SelectiveCallRejectionCriteria>", req = {
                    method: "POST",
                    url: baseUrl + $rootScope.username + apiName,
                    headers: {
                        Accept: "text/xml",
                        "Content-Type": "text/xml"
                    },
                    data: xmlParams
                };
                $http(req).success(function(response) {
                    defer.resolve("", contact.number);
                }).error(function(error) {
                    console.log(error), defer.reject(error);
                });
            }), defer.promise;
        }, service.getAllCallRejectionUrls = function() {
            var apiName = "/services/SelectiveCallRejection", defer = $q.defer();
            return $http.get(baseUrl + $rootScope.username + apiName).success(function(response) {
                var newList;
                if (response.SelectiveCallRejection.criteriaActivations.criteriaActivation) {
                    newList = response.SelectiveCallRejection.criteriaActivations.criteriaActivation.constructor === Array ? response.SelectiveCallRejection.criteriaActivations.criteriaActivation : [ response.SelectiveCallRejection.criteriaActivations.criteriaActivation ];
                    var urls = [];
                    _.each(newList, function(item) {
                        urls.push({
                            url: item.uri.$
                        });
                    }), defer.resolve(urls);
                } else defer.resolve([]);
            }).error(function(error) {
                console.log(error), defer.reject(error);
            }), defer.promise;
        }, service.get = function() {
            var defer = $q.defer();
            return service.getAllCallRejectionUrls().then(function(urls) {
                var contacts = [], promises = [];
                _.each(urls, function(url) {
                    promises.push($http.get($rootScope.xsp + "/com.broadsoft.xsi-actions" + url.url));
                }), $q.all(promises).then(function(results) {
                    _.each(results, function(response) {
                        var base = response.data.SelectiveCallRejectionCriteria.criteria;
                        contacts.push({
                            name: base.criteriaName.$,
                            number: base.criteriaFromDn.phoneNumberList.phoneNumber.$,
                            privateCalls: base.criteriaFromDn.includeUnavailableCallers.$,
                            anonymousCalls: base.criteriaFromDn.includeAnonymousCallers.$
                        });
                    }), defer.resolve(contacts);
                });
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("BSSip", [ "$rootScope", "$http", "$q", "$base64", function($rootScope, $http, $q, $base64) {
        var service = {}, chromePhoneDeviceType = "Chrome-Phone", configUrl = $rootScope.xsp + ":443/dms/chrome-phone/config.json";
        return service.getChromeDevice = function() {
            var defer = $q.defer(), apiName = "/profile/device";
            return chrome.storage.local.get(function(storage) {
                $http.get($rootScope.xsp + "/com.broadsoft.xsi-actions/v2.0/user/" + $rootScope.username + apiName).success(function(response) {
                    _.each(response.AccessDevices.accessDevice, function(device) {
                        var deviceType = "undefined" != typeof device.deviceType ? device.deviceType.$ : "";
                        deviceType === chromePhoneDeviceType && defer.resolve(device);
                    });
                }).error(function(error) {
                    console.log(error), defer.reject(error);
                });
            }), defer.promise;
        }, service.getSIPConfig = function() {
            var defer = $q.defer();
            return service.getChromeDevice().then(function(device) {
                "undefined" == typeof device.deviceUserNamePassword && defer.reject("This device does not have a user name or password in the broadworks settings");
                var username = device.deviceUserNamePassword.userName.$, password = device.deviceUserNamePassword.password.$, req = {
                    method: "GET",
                    url: configUrl,
                    headers: {
                        Authorization: "Basic " + $base64.encode(username + ":" + password),
                        Accept: "text/xml",
                        "Content-Type": "text/xml"
                    }
                };
                $http(req).success(function(response) {
                    defer.resolve(response);
                }).error(function(error) {
                    console.log(error), defer.reject(error);
                });
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("LocalContacts", [ "$q", function($q) {
        var service = this;
        return service.get = function() {
            var defer = $q.defer();
            return chrome.storage.local.get(function(storage) {
                storage.favs ? defer.resolve(storage.favs) : defer.resolve([]);
            }), defer.promise;
        }, service.add = function(contact) {
            var defer = $q.defer();
            return chrome.storage.local.get(function(storage) {
                var favs = [];
                storage.favs && (favs = storage.favs), console.log("favs", favs);
                var contactAlreadyExists = _.find(favs, function(obj) {
                    return console.log(obj.name, contact.name), contact.name ? obj.name == contact.name : obj.firstName + " " + obj.lastName == contact.firstName + " " + contact.lastName;
                });
                console.log("favs", contactAlreadyExists), "Unknown" == contact.name || "Unknown" == contact.firstName ? favs.push(contact) : contactAlreadyExists || favs.push(contact), 
                chrome.storage.local.set({
                    favs: favs
                }), defer.resolve(storage.favs);
            }), defer.promise;
        }, service["delete"] = function(index) {
            var defer = $q.defer();
            return chrome.storage.local.get(function(storage) {
                var favs = storage.favs;
                favs.splice(index, 1), chrome.storage.local.set({
                    favs: favs
                }), defer.resolve(favs);
            }), defer.promise;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("Media", [ "$rootScope", "Storage", "$state", function($rootScope, Storage, $state) {
        var service = this;
        return service.startVideoCall = function(contact) {
            return $rootScope.registeredWRS ? ($rootScope.video = !0, Storage.setValue("currentCallContact", contact), 
            $state.go("app.videoCall", {
                contact: contact,
                makeCall: !0,
                displayVideo: !0
            }), void 0) : "error";
        }, service.startAudioCall = function(contact) {
            return $rootScope.registeredWRS ? ($rootScope.video = !1, Storage.setValue("currentCallContact", contact), 
            $state.go("app.videoCall", {
                contact: contact,
                makeCall: !0,
                displayVideo: !1
            }), void 0) : "error";
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("Storage", [ function() {
        var service = this;
        return service.setValue = function(key, value) {
            chrome.storage.local.remove(key);
            var storage = {};
            storage[key] = value, chrome.storage.local.set(storage);
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("Utility", [ function() {
        var service = {};
        return service.setChromeToMinSize = function() {
            console.log("set the window to min size"), console.log(chrome.app.window.current().isFullscreen()), 
            chrome.app.window.current().isFullscreen() && (console.log("in here"), chrome.app.window.current().restore(), 
            chrome.app.window.current().fullscreen());
            var monitorWidth = window.screen.availWidth, monitorHeight = window.screen.availHeight, top = Math.round(monitorHeight / 2 - 284), left = Math.round(monitorWidth / 2 - 200);
            chrome.app.window.current().innerBounds.maxWidth = 400, chrome.app.window.current().innerBounds.maxHeight = 568, 
            chrome.app.window.current().innerBounds.minWidth = 400, chrome.app.window.current().innerBounds.minHeight = 568, 
            chrome.app.window.current().innerBounds.top = top, chrome.app.window.current().innerBounds.left = left, 
            chrome.app.window.current().innerBounds.width = 400, chrome.app.window.current().innerBounds.height = 568;
        }, service.setChromeToVideoSize = function() {
            console.log("set the window to video size");
            var monitorWidth = window.screen.availWidth, monitorHeight = window.screen.availHeight, videoWidth = Math.round(monitorWidth / 2), videoHeight = Math.round(9 * videoWidth / 16), top = Math.round(monitorHeight / 2 - videoHeight / 2), left = Math.round(monitorWidth / 2 - videoWidth / 2);
            chrome.app.window.current().innerBounds.maxWidth = null, chrome.app.window.current().innerBounds.maxHeight = null, 
            chrome.app.window.current().innerBounds.minWidth = videoWidth, chrome.app.window.current().innerBounds.minHeight = videoHeight, 
            chrome.app.window.current().innerBounds.top = top, chrome.app.window.current().innerBounds.left = left, 
            chrome.app.window.current().innerBounds.width = videoWidth, chrome.app.window.current().innerBounds.height = videoHeight;
        }, service.getFirstLetter = function(input) {
            return input ? input.charAt(0) : "?";
        }, service.getTimesForDropDown = function() {
            var times = [];
            return _(96).times(function(n) {
                n % 4 == 0 ? times.push(40 > n ? "0" + Math.floor(n / 4) + ":00" : Math.floor(n / 4) + ":00") : n % 4 == 1 ? times.push(40 > n ? "0" + Math.floor(n / 4) + ":15" : Math.floor(n / 4) + ":15") : n % 4 == 2 ? times.push(40 > n ? "0" + Math.floor(n / 4) + ":30" : Math.floor(n / 4) + ":30") : n % 4 == 3 && times.push(40 > n ? "0" + Math.floor(n / 4) + ":45" : Math.floor(n / 4) + ":45");
            }), times;
        }, service.sanitizeDates = function(date) {
            return date = null !== date.match(" ") ? date.replace(/\s/g, "-") : date, date = null !== date.match("/") ? date.replace(/\//g, "-") : date;
        }, service.getTimeZone = function() {
            var date = new Date();
            if (null !== date.toString().match(/-(....) /)) {
                var timeZone = date.toString().match(/-(....)/)[1];
                return timeZone.substr(0, 2) + ":" + timeZone.substr(2, 4);
            }
            return "";
        }, service.formatDate = function(date, time) {
            return time = time || "00:00", date ? service.sanitizeDates(date) + "T" + time + ":00.000-" + service.getTimeZone() : "";
        }, service.getBrowserLanguage = function() {
            var language = navigator.language || navigator.userLanguage || "en-US";
            return console.log("Your current language is :", language), language;
        }, service;
    } ]);
}(), function() {
    "use strict";
    ucone.factory("webRTC", [ "$q", "Storage", "$rootScope", "$state", "Utility", "Auth", function($q, Storage, $rootScope, $state, Utility, Auth) {
        var userAgent, service = {};
        service.call1 = {
            session: null,
            active: !1
        }, service.call2 = {
            session: null,
            active: !1
        }, service.blockIncoming = !1;
        var configuration, isVideo = !1;
        return service.stop = function() {
            userAgent.stop();
        }, service.toggleVideo = function(isVideo, session) {
            var options1 = {
                mediaConstraints: {
                    audio: !0,
                    video: isVideo
                },
                createOfferConstraints: {
                    mandatory: {
                        OfferToReceiveAudio: !0,
                        OfferToReceiveVideo: isVideo
                    }
                }
            };
            userAgent.isConnected() && session && userAgent.getUserMedia(options1, function(localStream) {
                var options2 = {
                    localMedia: localStream,
                    createOfferConstraints: {
                        mandatory: {
                            OfferToReceiveAudio: !0,
                            OfferToReceiveVideo: isVideo
                        }
                    }
                }, selfVideo = document.getElementById("selfVideo");
                selfVideo.src = window.URL.createObjectURL(localStream), session.changeSession(options2, function() {
                    console.log("change session succeeded");
                }, function() {
                    console.log("change session failed");
                });
            }, function() {
                console.log("getUserMedia success");
            }, function(error) {
                console.log("getUserMedia error", error);
            }, !0);
        }, service.connected = function(event) {
            console.log("connected");
        }, service.disconnected = function(event) {
            console.log("disconnected"), Auth.setConfig("attemptTwo").then(function(config) {
                service.init(config).then(function(userAgent) {});
            }), service.call1.session.terminate(), service.call1 = {
                session: null,
                active: !1
            }, service.call2.session.terminate(), service.call2 = {
                session: null,
                active: !1
            }, service.closeVideo();
        }, service.registered = function(event) {
            $rootScope.registeredWRS = !0, console.log("registered");
        }, service.registrationFailed = function(event) {
            $rootScope.registeredWRS = !1, Auth.setConfig("attemptTwo").then(function(config) {
                service.init(config).then(function(userAgent) {});
            }), console.log("registrationFailed");
        }, service.onReInvite = function(event) {
            console.log(event), event.data.session.acceptReInvite();
        }, service.progress = function(event) {
            console.log("progressEventFired"), $rootScope.$broadcast("progressEventFired", event);
        }, service.failed = function(event) {
            console.log("failed event", event), service.call1.session && "Rejected" !== event.data.cause && "Canceled" !== event.data.cause && (console.log("found the first session"), 
            service.call1.session.terminate()), service.call1 = {
                session: null,
                active: !1
            }, service.call2.session && "Rejected" !== event.data.cause && "Canceled" !== event.data.cause && (console.log("found the second session"), 
            service.call2.session.terminate()), service.closeVideo();
        }, service.started = function(event) {
            service.blockIncoming = !0, console.log("broadcasting..."), service.call1.progress = !1, 
            service.call2.progress = !1, $rootScope.$broadcast("sessionReady", event);
        }, service.resumed = function(event) {
            console.log("resumed");
        }, service.held = function(event) {
            console.log("held");
        }, service.ended = function(event) {
            console.log("ended"), isVideo = !1, service.closeVideo();
        }, service.newDTMF = function() {
            console.log("new dtmf");
        }, service.incomingCall = function(event) {
            console.log("incoming call from", event);
            var name = "";
            service.call1.session ? name = service.call1.session.remote_identity.display_name : service.call2.session && (name = service.call2.session.remote_identity.display_name), 
            service.blockIncoming || $state.go("app.incomingCall", {
                displayName: name
            });
        }, service.makeCall = function(phoneNumber, displayVideo) {
            var options = {
                mediaConstraints: {
                    audio: !0,
                    video: displayVideo
                }
            };
            console.log("make call to: ", phoneNumber), userAgent.call(phoneNumber, options);
        }, service.accept = function(videoEnabled) {
            $rootScope.video = videoEnabled, console.log("accepting", videoEnabled);
            var options = {
                mediaConstraints: {
                    audio: !0,
                    video: videoEnabled
                },
                createOfferConstraints: {
                    mandatory: {
                        OfferToReceiveAudio: !0,
                        OfferToReceiveVideo: videoEnabled
                    }
                }
            };
            service.call1.session ? service.call1.session.answer(options) : service.call2.session && service.call2.session.answer(options), 
            $state.go("app.videoCall");
        }, service.decline = function() {
            console.log("declining call"), service.call1.session && (console.log("here"), service.call1.session.terminate(), 
            service.call1 = {
                session: null,
                active: !1
            }, console.log("here")), service.call2.session && (console.log("here2"), service.call2.session.terminate(), 
            service.call2 = {
                session: null,
                active: !1
            }, console.log("here2")), service.closeVideo();
        }, service.hold = function(session) {
            console.log("attempt hold", session), session.hold(function() {
                return console.log("success"), !0;
            }, function(error) {
                console.log("error"), console.log(error);
            });
        }, service.unhold = function(session) {
            console.log("attempt unhold", session), session.unhold(function() {
                return console.log("success"), !0;
            }, function(error) {
                console.log("error"), console.log(error);
            });
        }, service.transfer = function(number, session, type) {
            "call1" === type && (service.call1 = {
                session: null,
                active: !1
            }), "call2" === type && (service.call2 = {
                session: null,
                active: !1
            }), userAgent.transfer(number, session), service.closeVideo();
        }, service.attendedTransfer = function(number, session) {
            userAgent.attendedTransfer(number, session);
        }, service.hangUp = function(type) {
            console.log("hang up the call: ", type), "call1" === type && (console.log("hanging up on call 1"), 
            service.call1.session.terminate(), service.call1 = {
                session: null,
                active: !1
            }), "call2" === type && (console.log("hanging up on call 2"), service.call2.session.terminate(), 
            service.call2 = {
                session: null,
                active: !1
            }), service.closeVideo();
        }, service.closeVideo = function() {
            service.blockIncoming = !1, console.log("call1", service.call1), console.log("call2", service.call2), 
            null == service.call1.session && null !== service.call2.session && (console.log("unholding call 2"), 
            service.unhold(service.call2.session), service.call1.active = !1, service.call2.active = !0), 
            null == service.call2.session && null !== service.call1.session && (console.log("unholding call 1"), 
            service.unhold(service.call1.session), service.call1.active = !0, service.call2.active = !1), 
            null == service.call1.session && null == service.call2.session && (console.log("both sessions are null"), 
            service.call1 = {
                session: null,
                active: !1
            }, service.call2 = {
                session: null,
                active: !1
            }, Utility.setChromeToMinSize(), $state.go("app.header.main.favs"));
        }, service.sendDTMF = function(digit, session) {
            var codes = {
                "0": "0",
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
                "6": "6",
                "7": "7",
                "8": "8",
                "9": "9",
                "#": "#",
                "*": "*"
            };
            service.call1.active && session.sendDTMF(codes[digit], {
                duration: 200,
                interToneGap: 50
            }), service.call2.active && session.sendDTMF(codes[digit], {
                duration: 200,
                interToneGap: 50
            });
        }, service.muteAudio = function(isMuted, session) {
            var localStreams = session ? session.getLocalStreams() : null;
            if (localStreams) {
                var localMedia = localStreams[0], localAudio = localMedia.getAudioTracks()[0];
                localAudio.enabled = !isMuted;
            }
        }, service.init = function(sipConfig) {
            var defer = $q.defer();
            return configuration = sipConfig, userAgent = new ExSIP.UA(configuration), userAgent.setRtcMediaHandlerOptions({
                reuseLocalMedia: !1,
                videoBandwidth: 2048,
                disableICE: !0,
                RTCConstraints: {
                    optional: [ {
                        DtlsSrtpKeyAgreement: !0
                    } ],
                    mandatory: {}
                }
            }), userAgent.on("connected", function(event) {
                service.connected(event);
            }), userAgent.on("disconnected", function(event) {
                service.disconnected(event);
            }), userAgent.on("registered", function(event) {
                service.registered(event), defer.resolve(userAgent);
            }), userAgent.on("registrationFailed", function(event) {
                service.registrationFailed(event);
            }), userAgent.on("onReInvite", function(event) {
                service.onReInvite(event);
            }), userAgent.on("newRTCSession", function(e) {
                var session = e.data.session;
                session.on("progress", function(event) {
                    service.progress(event);
                }), session.on("failed", function(event) {
                    service.failed(event);
                }), session.on("started", function(event) {
                    service.started(event);
                }), session.on("resumed", function(event) {
                    service.resumed(event);
                }), session.on("held", function(event) {
                    service.held(event);
                }), session.on("ended", function(event) {
                    service.ended(event);
                }), session.on("newDTMF", function(event) {
                    service.newDTMF(event);
                }), null == service.call1.session ? (console.log("set 1"), service.call1 = {
                    session: session,
                    active: !0
                }) : (console.log("set 2"), service.call2 = {
                    session: session,
                    active: !0
                }), "incoming" === session.direction && service.incomingCall(e);
            }), userAgent.start(), defer.promise;
        }, service;
    } ]);
}(), ucone.filter("translator", function($rootScope) {
    return function(value) {
        if ((null === $rootScope.language || void 0 === $rootScope.language) && ($rootScope.language = "en-US"), 
        [ "fr", "fr-ch", "fr-mc", "fr-fr", "fr-lu", "fr-ca", "fr-be" ].indexOf($rootScope.language) > -1) {
            var frHash = fr.language();
            return frHash[value];
        }
        if ([ "es", "es-ar", "es-bo", "es-ci", "es-co", "es-cr", "es-do", "es-ec", "es-sv", "es-gt", "es-hn", "es-mx", "es-ni", "es-pa", "es-py", "es-pe", "es-pr", "es-es", "es-uy", "es-ve" ].indexOf($rootScope.language) > -1) {
            var esHash = es.language();
            return esHash[value];
        }
        if ([ "de", "de-at", "de-de", "de-li", "de-lu", "de-ch" ].indexOf($rootScope.language) > -1) {
            var germanHash = german.language();
            return germanHash[value];
        }
        if ([ "it", "it-ch" ].indexOf($rootScope.language) > -1) {
            var italianHash = italian.language();
            return italianHash[value];
        }
        var enHash = en.language();
        return enHash[value];
    };
}), ucone.filter("truncate", function() {
    return function(value, length, maxLength, apply) {
        return value.length > length && apply ? value.substr(0, length) + "..." : value.length > maxLength ? value.substr(0, maxLength) + "..." : value;
    };
});

var en = new function() {
    this.language = function() {
        return {
            "Login-SignIn": "Sign In",
            "Login-PleasEnter": "Please enter your credentials to log in.",
            "Login-XSPPlaceholder": "Login url",
            "Login-EmailSample": "user@domain",
            "Login-PasswordSample": "Password",
            "Login-InvalidError": "Invalid username or password.",
            Available: "Available",
            BusinessTrip: "Business Trip",
            GoneForTheDay: "Gone For The Day",
            Lunch: "Lunch",
            Meeting: "Meeting",
            OutOfOffice: "Out Of Office",
            TemporarilyOut: "Temporarily Out",
            Training: "Training",
            Unavailable: "Unavailable",
            Vacation: "Vacation",
            SearchExample: "Type a name or number",
            Favs: "Favs",
            Recent: "Recent",
            Contacts: "Contacts",
            GoogleContacts: "Google Contacts",
            TelephoneDirectory: "Telephone Directory",
            Incoming: "Incoming",
            VIP: "VIP",
            Blocked: "Blocked",
            "Incoming-HeaderMessage": "Change how your incoming calls are handled",
            Availability: "Availability",
            Until: "Until",
            TransferTo: "Transfer To",
            ForwardTo: "ForwardTo",
            MobileNumber: "Mobile Number",
            CallNotifyEmail: "Call Notify Email",
            "VIP-HeaderMessage": "Calls from VIPs will ring through regardless of your availability status",
            AddVIPs: "AddVIPs",
            "Blocked-HeaderMessage": "The caller will receive a busy signal and will not be able to leave you voicemail.",
            BlockPrivateCalls: "Block Private Calls",
            BlockAnonymousCalls: "Block Anonymous Calls",
            BlockSpecific: "Block Specific",
            Callers: "Callers",
            CallFrom: "Call From",
            Call: "Call",
            Calling: "Calling...",
            Call1Hold: "Call 1 (Hold)",
            Call1Active: "Call 1 (Active)",
            Call2Hold: "Call 2 (Hold)",
            Call2Active: "Call 2 (Active)",
            Join: "Join",
            NoFavsYet: "You have no favs yet.",
            AddAFavInstructions: "Click on a contact to add one.",
            InvalidUserNamePassword: "Invalid username, password or login url.",
            WRSNotRegistered: "WRS is not registered"
        };
    };
}(), es = new function() {
    this.language = function() {
        return {
            "Login-SignIn": "",
            "Login-PleasEnter": "",
            "Login-XSPPlaceholder": "",
            "Login-EmailSample": "",
            "Login-PasswordSample": "",
            "Login-InvalidError": "",
            Available: "",
            BusinessTrip: "",
            GoneForTheDay: "",
            Lunch: "",
            Meeting: "",
            OutOfOffice: "",
            TemporarilyOut: "",
            Training: "",
            Unavailable: "",
            Vacation: "",
            SearchExample: "",
            Favs: "",
            Recent: "",
            Contacts: "",
            GoogleContacts: "",
            TelephoneDirectory: "",
            Incoming: "",
            VIP: "",
            Blocked: "",
            "Incoming-HeaderMessage": "",
            Availability: "",
            Until: "",
            TransferTo: "",
            ForwardTo: "",
            MobileNumber: "",
            CallNotifyEmail: "",
            "VIP-HeaderMessage": "",
            AddVIPs: "",
            "Blocked-HeaderMessage": "",
            BlockPrivateCalls: "",
            BlockAnonymousCalls: "",
            BlockSpecific: "",
            Callers: "",
            CallFrom: "",
            Call: "",
            Calling: "",
            Call1Hold: "",
            Call1Active: "",
            Call2Hold: "",
            Call2Active: "",
            Join: "",
            NoFavsYet: "",
            AddAFavInstructions: "",
            InvalidUserNamePassword: ""
        };
    };
}(), fr = new function() {
    this.language = function() {
        return {
            "Login-SignIn": "",
            "Login-PleasEnter": "",
            "Login-XSPPlaceholder": "",
            "Login-EmailSample": "",
            "Login-PasswordSample": "",
            "Login-InvalidError": "",
            Available: "",
            BusinessTrip: "",
            GoneForTheDay: "",
            Lunch: "",
            Meeting: "",
            OutOfOffice: "",
            TemporarilyOut: "",
            Training: "",
            Unavailable: "",
            Vacation: "",
            SearchExample: "",
            Favs: "",
            Recent: "",
            Contacts: "",
            GoogleContacts: "",
            TelephoneDirectory: "",
            Incoming: "",
            VIP: "",
            Blocked: "",
            "Incoming-HeaderMessage": "",
            Availability: "",
            Until: "",
            TransferTo: "",
            ForwardTo: "",
            MobileNumber: "",
            CallNotifyEmail: "",
            "VIP-HeaderMessage": "",
            AddVIPs: "",
            "Blocked-HeaderMessage": "",
            BlockPrivateCalls: "",
            BlockAnonymousCalls: "",
            BlockSpecific: "",
            Callers: "",
            CallFrom: "",
            Call: "",
            Calling: "",
            Call1Hold: "",
            Call1Active: "",
            Call2Hold: "",
            Call2Active: "",
            Join: "",
            NoFavsYet: "",
            AddAFavInstructions: "",
            InvalidUserNamePassword: ""
        };
    };
}(), german = new function() {
    this.language = function() {
        return {
            "Login-SignIn": "",
            "Login-PleasEnter": "",
            "Login-XSPPlaceholder": "",
            "Login-EmailSample": "",
            "Login-PasswordSample": "",
            "Login-InvalidError": "",
            Available: "",
            BusinessTrip: "",
            GoneForTheDay: "",
            Lunch: "",
            Meeting: "",
            OutOfOffice: "",
            TemporarilyOut: "",
            Training: "",
            Unavailable: "",
            Vacation: "",
            SearchExample: "",
            Favs: "",
            Recent: "",
            Contacts: "",
            GoogleContacts: "",
            TelephoneDirectory: "",
            Incoming: "",
            VIP: "",
            Blocked: "",
            "Incoming-HeaderMessage": "",
            Availability: "",
            Until: "",
            TransferTo: "",
            ForwardTo: "",
            MobileNumber: "",
            CallNotifyEmail: "",
            "VIP-HeaderMessage": "",
            AddVIPs: "",
            "Blocked-HeaderMessage": "",
            BlockPrivateCalls: "",
            BlockAnonymousCalls: "",
            BlockSpecific: "",
            Callers: "",
            CallFrom: "",
            Call: "",
            Calling: "",
            Call1Hold: "",
            Call1Active: "",
            Call2Hold: "",
            Call2Active: "",
            Join: "",
            NoFavsYet: "",
            AddAFavInstructions: "",
            InvalidUserNamePassword: ""
        };
    };
}(), italian = new function() {
    this.language = function() {
        return {
            "Login-SignIn": "",
            "Login-PleasEnter": "",
            "Login-XSPPlaceholder": "",
            "Login-EmailSample": "",
            "Login-PasswordSample": "",
            "Login-InvalidError": "",
            Available: "",
            BusinessTrip: "",
            GoneForTheDay: "",
            Lunch: "",
            Meeting: "",
            OutOfOffice: "",
            TemporarilyOut: "",
            Training: "",
            Unavailable: "",
            Vacation: "",
            SearchExample: "",
            Favs: "",
            Recent: "",
            Contacts: "",
            GoogleContacts: "",
            TelephoneDirectory: "",
            Incoming: "",
            VIP: "",
            Blocked: "",
            "Incoming-HeaderMessage": "",
            Availability: "",
            Until: "",
            TransferTo: "",
            ForwardTo: "",
            MobileNumber: "",
            CallNotifyEmail: "",
            "VIP-HeaderMessage": "",
            AddVIPs: "",
            "Blocked-HeaderMessage": "",
            BlockPrivateCalls: "",
            BlockAnonymousCalls: "",
            BlockSpecific: "",
            Callers: "",
            CallFrom: "",
            Call: "",
            Calling: "",
            Call1Hold: "",
            Call1Active: "",
            Call2Hold: "",
            Call2Active: "",
            Join: "",
            NoFavsYet: "",
            AddAFavInstructions: "",
            InvalidUserNamePassword: ""
        };
    };
}();